buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

group = 'com.mousebirdconsulting.maply'
version = '3.0'

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    sourceSets {
        main {
            manifest.srcFile 'GradleManifest.xml'
            jni.srcDirs = []
            jniLibs.srcDir 'libs'
            res.srcDirs = ['res']
            java.srcDirs = ['src']
        }
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-project.txt'), 'proguard-rules.txt'
        }
    }
    
    lintOptions {
        abortOnError false
    }    
}

dependencies {
    compile 'com.android.support:support-v4:23.1.0'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.squareup.okio:okio:1.3.0'
}

task buildHeaders(type: Exec, description: 'Build headers to be used on native build') {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    commandLine "./buildheaders.sh", properties.getProperty('sdk.dir')
}


task buildNative(type: Exec, description: 'Compile native code using NDK') {
    def ndkDir = plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder()

    commandLine "$ndkDir/ndk-build",
            '-C', file('.').absolutePath,
            '-j', Runtime.runtime.availableProcessors(),
            'all',
             'APP_ABI=' + (project.hasProperty('architecture') ? architecture : 'all')
//           ,'NDK_DEBUG=1'
}

task cleanNative(type: Exec, description: 'Clean native compiled code') {
    def ndkDir = plugins.getPlugin('com.android.library').sdkHandler.getNdkFolder()
    commandLine "$ndkDir/ndk-build",
            '-C', file('.').absolutePath,
            'clean'
}
    
clean.dependsOn 'cleanNative'
buildNative.dependsOn 'buildHeaders'

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn buildNative
}


def siteUrl = 'http://mousebird.github.io/WhirlyGlobe/'
def gitUrl = 'https://github.com/mousebird/WhirlyGlobe.git'

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'

                name 'WhirlyGlobe-Maply is an open source toolkit for iOS and Android. You can use it to build an interactive 2D map (Maply) or a 3D globe (WhirlyGlobe)'
//                artifactId = 'maply' It's just the folder name
                url siteUrl

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id '1'
                        name 'Steve Gifford'
                        email 'sjg@mousebirdconsulting.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}

task javadoc(type: Javadoc) {
    source = fileTree(dir: ".", include: "**/*.java")
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    destinationDir = file("doc")
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        userOrg = 'mousebirdconsulting'
        repo = "WhirlyGlobe"
        name = "Maply"
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
